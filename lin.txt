Shell: Shell is an interpreter that provide you an interface to e
xecute commands. The default shell used by RHEL is bash (bourne again shell).
There are different shells available:
bsh: bourne shell
tsh: turbo shell
csh: cshell
ksh: korn shell.
bash: broune again shell.
Note: bash is having automatic command completion by using tab key.
Kenrel: Kernel is a core operating system program. Kenerl is only one which interacts with kernel. Kernel is storned in /boo directori and its name start with vmlinuz-itsVersionReleaseNumber. You can see the same with uname -r command.

The linux command syntax:
		$command optin(s) argument(s)
Options always starts with - symbol.

hostname: used to print the server name
	    server or machine or host or computer are same.

ls : used to list files or directories in the given directory
ls  -l : list files or directories in long list format.
Any file that starts with . is hidden. To see hidden files, use ls -l -a (-a option will list hidden files or directories)

logname: prints login name of the user

whoami : print the login name of the user

who or w: print currently logged in users

uname: pints the OS name
such as OS, Kernel version, Architecture etc.,
uname -r : print the kernel version.

uname -a : print all the system attributes
echo: echo command is used to print some text on the screen

file command:- used to print the file type.
ex:- file FileName.

ex:- echo "TextToPrint"
or   ech -e "TexttoPrint"
      -e : enhanced mode

cal : print the calender of the current month

cal year : prints the all months calender of the given year
ex:- cal 2022

cal month year : print the calender of the given month of the given years
ex:- cal 06 2022
exit or Ctrl-d or logout: used to exit the shell

wc: word count
syntax: wc [options] filename
	 	-w : number of words
		-c : number of characters
		-l : number of lines
example: wc -l xyz.txt
pwd: print working directory
tty : print your psedo terminal slave device path. ie your terminal number.
ex:- tty
passwd:- used to change the pasword 
Syntax:- 

 	passwd 
	or
	passwd username
ex:-
	passwd oradmin
        Note:- if no username is specified, the passwd command assumes to change password of currently logged in user (ie self password). root user can change password of any other user. 

write : write command is used write data to another logged in user.
ex:- write username
     and type the data. End the conversaton with ctr-d. ctrl-d refers to End of File (EOF).

wall: write all. The message is sent to all the currently logged in users.
ex:- wall "Text to broadcast"

Note: You can disable mesg, so that you will not receive write or wall commad message. To do this use the below command:
      mesg n 
      the above line will disable message to No.
      mesg y
      the above will turn on the mesg
      To see the status of mesg:
      mesg
      the above will pring mesg y or mesg n. y means yes and n means no.
cat command:- Used to print the content of the file. Cat is short form for concatenation
Synatx:- cat file1 [ file2 file3 ... ]

tail command:-
-------------
prints last few lines of the file (by default 10 lines)
Syntax:-
	tail /etc/passwd
	or
	tail -20 /etc/passwd	
	the above command prints last 20 lines of the file.
	or
	tail -f /path/to/file
	ex:- 
	tail -f /var/log/messages 
	The above command will print last 10 line, wait continuously for the file updates, and if any, they were printed.

head command:-
-------------
prints first few line of the file (by defualt 10 lines )
Synatax:- head /etc/passwd
	or	
	head -20 /etc/passwd
	the above command prints first 20 lines of the file
more command:-
-------------
More command prints the file page by page. Enterkey will scrol down one line, and space bar scrols up one page at a time.
syntax:- more filename
	or
	 more filename1 filename2
Use space bar or f or d to scrol down. And b for scroll up. Enter key will scrol down line.

date command:-
------------
ex:-  date
Tue May  2 21:51:41 IST 2017
Day Month Date HH:MM:SS TimeZone YYYY

Date command with formatted output:-
----------------------------------

a) date '+ %h'

Date command arguments:-
a = Mon
A = Monday
b or h  = Jan
B = January
c = Complete date format; Tue 02 May 2017 10:04:54 PM IST
C = Century; ex:- 20
d = date; ex:- 02
m = Month; ex:- 05 for May
y = Year Short form; ex:- 17
Y = Year Full form ex:- 2017
Example:- %C%y will print 2017
H = Hour
M = Minute
S = Seconds
%n = New Line

Please refer date --help for more info.
Create an empty file:-
--------------------
Syntax:- touch fileName
         ex:- touch sfile1.txt


Create a directory:-
--------------------
Syntax:- mkdir DirName
         ex:- mkdir Sample1
Verify with ls -l (long list) if the directory is created

Changing Directory using cd command:-
Syntax:- cd DirctoryName
	ex:- cd Sample1
             verify with pwd command (print working directory)

1)Any file that starts with . is a hidden files and can only listed with -a flags with ls command.
2) . refers to current directory and .. refers to the parent directory.
3)A home directory is directory where the user get as current working directory upon login.
4)Simply use cd command to enter into user's home directory. You can also use cd ~ to enter into user's home directory.

Creating multiple directories with mkdir command:-
--------------------------------------------------
For example if you want to create direcdtory structure as below:

/home/sanjeevi/dir1/dir2/dir3/dir4 then you can use below two methods.

Assuming my pwd is /home/sanjeevi.
  mkdir dir1
      cd dir1
         mkdir dir2
            cd dir2
               mkdir dir3
                     cd dir3
                         mkdir dir4
To achieve the above in a single step:
mkdir -p dir1/dir2/dir3/dir4

The -p flag with mkdir command will create all intermediate directories if they are missing.

Removig Directory:-
-----------------
rmdir DirectoryName
or
rmdir /Path/to/Directory
or 
rmdir -p /Path/of/directories
where -p progressive, ie all intermediate directories are removed, provided they are empty.
You can only remove empty directory.
filesystem:- The heirarchical arrangement of directories and files known as filesystem.
Path:- 
 i)The path of a file or directory specifies its unique file system location.
ii)Followinga file path tranverses one or more named subdirectories, separated by a forward slash(/), until destination is reached.
iii)Directories contain other files and other subdirectories.
 iv)The path can be represented in two ways a) absolute or full path b) relative path.
  v)An absolute path is a fully qualified name, specifiying the files exact location in the file system heirachy. It begins at the root (/) directory and specifies each subdirectory that must be traversed to reach the specific file.
 vi)Absolute path names can be long to type, so files may also be located relative to the current working directory for your shell prompt known as relative path. A relative path identifies a unique file, specifying only the path necessary to reach the file from the working directory. Any path name other than a forward slash as the first character is a relative path name. 

touch command:- used create an empty file if it doesnt exists. if the file exists, then its modifcation timestamp is updated without modifying its content.
syntax:- touch [options] file1 [file2 file3 .... ]
removing file:-
--------------
rm command is used to delete a file. Syntax:- rm filename
					  or
					      rm -i filename
					  or
					      rm -f filename
						where -i : interactive
						      -f : force
You can use rm command to delete directories using -r flag (where -r refers to recursive). This delete files, subdirectories and the directory itself.
			ex :- rm -r dir1
			      all files and multilevel directories with dir1 and dir1 itself with be deleted.


pattern Matching:- (globbing):
-----------------

Pattern		Meaning (matches)
---------------------------------------------------------------------------------------------------
*		Any string of zero or more characters
? 		Any Single character
~		The current user's home directory
~username	The given username's home directory
~+		The current working directory
~-		The previous working directory
[abc...]*	Any one character in enclosed clause
[!abc...]*	Any one character not in enclosed clause
[^abc...]*	Any one character not in enclosed clause
[[:alpha:]]	Any alphabetic character
[[:lower:]]	Any lowercase character
[[:upper:]]	Any uppercase character
[[:alnum:]]	Any alphabetic or digit character
[[:punct:]]	Any any printable character not a space or alphanumeric
[[:digit:]]	Any digit 0-9
[[:space:]] 	Any one white space character: may include tab, newline, or carrage return, form feeds as well as space.

Exercises:-
-----------

==> ls a* : list all files starting with letter 'a'
==> ls *a*: lists all files having letter 'a' anywhere in the filename
==> ls [ac]* : list all files starting with letter 'a' or 'c'
==> ls ???? : list all files with filename havaing 4 characters
==> ls ~/glob : list all files in the directory called /home/Username/glob ; (~ refers to user's home directory)

==> echo {1..10} : prints 1 2 3 4 5 6 7 8 9 10
echo {a..z} : prints a b c d e f g h i j k l m  n o p q r s t u v w x y z
echo {a..d} : prints a b c d 
echo {a..d}{1..3} : prints a1 a2 a3 c1 c2 c3 d1 d2 d3
echo File{a..d}{1..3}: prints Filea1 Filea2 Filea3 Fileb1 Fileb2 Fileb3 Filec1 Filec2 Filec3 Filed1 Filed2 Filed3
echo a{1,3,6} : prints a1 a3 a6
echo a{1,2,5,{3..6}} : prints a1 a2 a5 a3 a4 a5 a6
echo File_{prakash,vikas,lavanya}: prints File_prakash File_vikas File_lavanya
echo File_{prakash,vikas,lavanya,vamsi,jagadees,ashok,balaji,karunaka,mani,sanjeevi}
touch File_{prakash,vikas,lavanya,vamsi,jagadees,ashok,balaji,karunaka,mani,sanjeevi}


Keystrokes			Meaning
-------------------------------------------
<Backspace>		Corrects mistakes
<ctrl-c>		Terminates the current command and returns to shell
<ctrl-d> 		End of transimission or end of the file
<ctrl-s>		Temporarily stops output to screen
<ctrl-q>		Resumes the output
<ctrl-u>		Clears the whole command
-------------------------------------------

Excercise:-
Managing Files with Shell Expansions:-
-------------------------------------

==>Perform the following steps on your server.Login with your credentials and begin the lab in your home directory.
1. To begin, create set of empty practice files to use in the lab. Create a total of 12 files with names tv_seasonX_episodeY.ogg. Replace X with the season number and Y with that season's episode, for two seasons of six episodeds each.

2.As the author is making series of mystery novels, create a total of 8 files with names mystery_chapterX.odf. Replace X with numbers 1-8.

3.To organize the TV episodes, create two sub-directories named season1 and season2 under the videos directory. Use one command for the same.

4. Move the appropriate TV episodes into the season directories. Use only two commands, specifying destination using relative syntax.

5. To organize the mystery book chapters, create a two level directory heirarchy with one command. Create 'my_bestseller' directory under the 'documents' directory, and 'chapters' beneath the new 'my_bestseller' directory.

6.Using One command, create three more subdirectories directly under the  'my_bestseller' directory. 23Name these sub-directories 'editor','Plot_Change' and 'vacation'.  

7.Change to the chapters directory, using the home directory shortcut to specify the source file, move all book chapters into chapters directory which is now your current directory.

8.The first two chapters are sent to the editor for revision, move those two chappaters only to the editory directory. Use relative syntax starting from the chapter's directory.

9.Chapters 7 and 8 will be written while on vacation. Move these files from chapters directory to vacation directory, Use one command without wildcard characters.

10.With one command, change the working directory to the seasons TV Episodes location, then copy the first episode of the season1 to the vacation directory.

11.With one command, change the working directory to vacation, then list its files.  Return to the season1 directory using previous directory shortcut. Copy the episodes files into vaction. Retun to vactation using shortcut again.

12.Chapter5 and 6 may need a plot change, copy both files into plot_change directory. Move Up one directory to vacation's parent directory. Then use one command from there.

13.To track changes, make three backups of chapter5. Change to the plot_change directory. Copy myster_Chapter5.odf as a new file name to include the file date(year-mm-dd). Make another copy appending the current time stamp(as the numberb of seconds since the epoch) to ensure the unque filename. Also make a copy appending the current user ($USER) to the filename.

14.Delete the plot_change directory. First delete all the files of the files in the plot_change directory. Change directory up one level becauase the directory cannot be deleted while you are in the working directory. Try to delete the directory using the rum command without the recursive option. This attempt whould fial. now use th rmdir command which will succeed.

15.When the vacation over, the vacation directory is no loger needed. Delete it using the rm commnd with the recursive option, when finished return to the home directory.

						/

						|
						V
					      home
						|
						V
					      sanjeevi
						|
						V
			--------------------------------------------------------
			|			|
			V			V
		       Videos		    documents
		--------------     	---------------------
		|	|		|
		V	V		V
	     Season1  Season2	     my_bestseller
				---------------------------	
				|	|	|	  |
				v	v	v	  v	
			    Chapters  editor  plot_Chage Vacation


touch  tv_season{1..2}_episode{1..6}.ogg
touch mystery_chapter{1..8}.odf
mkdir -p Videos/season{1,2}
mv  tv_season1* Videos/season1
mv  tv_season2* Videos/season2
mkdir -p documents/my_bestseller/chapters
mkdir documents//my_bestseller/{editor,plot_change,vacation}
cd documents/my_bestseller/chapters/
mv ~/mystery_chapter* .
mv mystery_chapter{1,2}.odf ../editor/
mv mystery_chapter{7,8}.odf ../vacation/
cd ~/Videos/season1
cp tv_season1_episode1.ogg ~/documents/my_bestseller/vacation/
cd ~/documents/my_bestseller/vacation
ls -l
cd -
cp * ~/documents/my_bestseller/vacation/
cd -
 cd ..
 cp chapters/mystery_chapter{5,6}.odf plot_change/
cd plot_change/
cp mystery_chapter5.odf mystery_chapter5_$(date '+%Y-%m-%d').odf
cp mystery_chapter5.odf mystery_chapter5_$(date '+%s').odf
cp mystery_chapter5.odf mystery_chapter5_$USER.odf
rm *
cd ..
rm plot_change
rmdir plot_change/
rm -r vacation/
cd



Meta Characters in Linux:-
-------------------------
Metacharacters are characters that the shell interpretes as having a special meaning.

|, &, ;, :, <, >, (, ), $, ` , ', " ,\, /. !, @, - , [ ] * ? ~

Wildcards are a subset of metacharacters taht are used to search for and match file patterns. Below are wild characters:
 *  ? ! [] [-]




Move command (mv):- Move or rename a file
Syntax:- mv sourceFile DestnFile
       or
 	 mv SourceDir	DestnDir



vi editor:-
-----------
--> Full screen editor
--> Three modes of operation - Command Mode, Text input mode, Last line mode
--> Uses one letter command,
--> Does not format text
--> Flexible search and replace facility with pattern matching
--> Allows for user-defined editing functions using macros.

to start vi editor  use command:
	vi
	or
	vi FileName


3 Modes of operation:
--> Command mode
-->Text Input mode or visual mode
--> Last line mode
When vi editor is opened, it is basically in command mode

i: text inser
:w  save/write
:w filename --> save as the data with the given filename
:q quit without saving
:q! quit forcely without saving
ZZ : save and quit 
Keyboard arrow keys can be used for navigation in the latest linux versions

h : move cursoner one character left
j : move cursoner one line  down
k : move cursoner one line up
l : move cursoner one character right

'n'j : move cursor downwards by 'n' lines
ex:- 4j or 4h or 5k or 5l etc.,

w : move cursor forward by a word
e : move cursor forward by a word (cursor is place at the end of character of the word)
b : move cursor backword by one word
H : move cursor to the first line of the screen
M : move the cursor to the middle of the screen
L : Move the cursor to the last line of the screen
G : Go to the last line of the file
5G : Go to the the 5th line of the file
1G : Go to the first line of the file
$ : move the cursor to the last character of the line
^ or 0 : move the cursor to the first character of the line
ctrl + d : scroll down (half screen)
or
ctrl +f : scroll down 

ctrl + u : scroll up  (half screen)
or
ctrl + b : scroll up

a : append (insert the tet after the cursor)
r : replace a character
R : replace sequece of characters

Deletion:-
x : delete a single character
or
'n'x : delete n number of characters.
u: undo the previous change.
U : undo multiple changes.

Yanking or Copy'ing:-
yy : yank (copy) a line (lines are bufferred)
3yy : copy three lines down the cursor 
p : paste yanked line
dd : delete a line (note: the deleted line will be bufferred which can be pasted with p )
3dd : delede 3 line downwarad to the cursor
dw : delete a word
4dw : delete 4 words
'n'dw : delete n words
o: create an empty line below the cursor
O (uppercase o) : create an empty line above the cursor.
d$ : delete all character till the end of the line
d^ or d0 : delete all the line till the beginning of the line.
Last linemode commands:
----------------------
: set number
: set nonumber
: set showmode
: set noshowmode

Search(or find)  for pattern:
------------------

/Pattern : search for the given  pattern in the file.

Find and replace:-
----------------
:%s/old/new
ex:-
:%s/fuctions/procedures
:%s/old/new/g : where g refers  to replace globally.

a)What are the three modes of vi editor ?
Ans:-
  Command mode (esc)
  Insert mode (i)
  Last Line Mode (:)
b)Other than vi editor, which editors are usually available in Linux(unix)?
Ans:- vim, ed, ex, nano

c) Whcih commands in vi editor would you use to perform the following operation:

--> Block copy
--> Block Move
--> Block delete
d) Two consecutive lines are to be combited into one. Which vi command will would you use to perform the same:

e)
	3 words to the right : -------------
        4 words to the left : -----------------
	top of the screen : ----------------
	bottom of the screen :-------------
	Beginning of the current line : -------------
	End of the current line : ---------
	Beginning of the file :- --------------
	end of the file : --------------
	go to the 100th line in the file : --------------
f)
How will you peform the following deltious in vi ?
	Character at the cursor : ---------
	One word from the current cursor position : -----
	current line : -----
	next 4 line : ----------
	line to the left of the cursor : ----------
	line to the right of the ursor : ------------
g) 
	:w _______________
	:q! _______________
	:wq ______________
	ZZ _______________
	set nu ___________
	set ai _______
	set eb_______
	set ic _______
	
h)What is the importance of .vimrc file in user's home directory.

i) What is the difference between yank and delete
	

arn:aws:iam::581356988621:mfa/Sanjeevi-Iphone
AKIAYOW4TVDG2SONNZK7
Secret Key Code: 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



#Generate root access keys
aws configure --profile root-mfa-delete-alc

# generate root access keys
aws configure --profile root-mfa-delete-alc

# enable mfa delete
aws s3api put-bucket-versioning --bucket my-alc --versioning-configuration Status=Enabled,MFADelete=Enabled --mfa "arn:aws:iam::581356988621:mfa/Sanjeevi-Iphone" --profile root-mfa-delete-alc

# disable mfa delete
aws s3api put-bucket-versioning --bucket my-alc --versioning-configuration Status=Enabled,MFADelete=Disabled --mfa "arn:aws:iam::581356988621:mfa/Sanjeevi-Iphone" --profile root-mfa-delete-alc


# delete the root credentials in the IAM console!!!
